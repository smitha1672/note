@ vimscript usage {
  ref.:http://learnvimscriptthehardway.stevelosh.com/
}

@ vimgrep usage {
  ref.: https://blog.easwy.com/archives/advanced-vim-skills-quickfix-mode/
  As follows:
    :vim[grep][!] /{pattern}/[g][j] {file} ..
  Recursive search:
    :vimgrep /dostuff()/j ../**/*.c
  Dotfiles:
    :vimgrep /pattern/ ./.*
  :cw
  :copen
    These commands all fill a list with the results of their search.
    "grep" and "vimgrep" fill the "quickfix list",
    which can be opened with :cw or :copen

  ref.: https://blog.csdn.net/zqiang_55/article/details/30715961
  vimgrep /匹配模式/[g][j] 要搜索的文件/范围
  g：表示是否把每一行的多个匹配结果都加入
  j：表示是否搜索完后定位到第一个匹配位置

  vimgrep /pattern/ %           在当前打开文件中查找
  vimgrep /pattern/ *           在当前目录下查找所有
  vimgrep /pattern/ **          在当前目录及子目录下查找所有
  vimgrep /pattern/ *.c         查找当前目录下所有.c文件
  vimgrep /pattern/ **/*        只查找子目录

  cn                            查找下一个
  cp                            查找上一个
  copen                         打开quickfix
  cw                            打开quickfix
  cclose                        关闭qucikfix
  help vimgrep                  查看vimgrep帮助

  ref.: https://blog.csdn.net/icbm/article/details/71036168
  files 参数举例：
  % 表示在当前缓冲区文件中查找。

  *.cpp 表示在当前目录中的 .cpp 文件中搜索。

  **/*.cpp 表示在当前目录及子目录中 .cpp 文件中搜索。

  **/*.cpp **/*.h 表示在当前目录及子目录中 .cpp、.h 文件中搜索。
}

@ git log and grep change file {
  $git log --stat 3ca83cb..bd09f47 | grep '\.\{3\}' | awk '{print $1}'
}

@ docker {
# delete docker images
  $ docker images
  $ docker rmi image_id
# install
  $ sudo apt-get install docker.io
  $ service docker status
  $ sudo usermod -aG docker smith
  $ docker version
  $ docker search ubuntu
  $ docker pull ubuntu:16.04
}

@ How to create a link to a directory [closed] {
#     Source                             Link
ln -s /home/jake/doc/test/2000/something /home/jake/xxx

Hard link (files only, less flexible and not self documenting)
#   Source                             Link
ln /home/jake/doc/test/2000/something /home/jake/xxx
}

@ cp sensor hub source example {
    find $SRC_DIR -type d \( -name sensorhub \) -print | grep -v mt2523_hdk | xargs -I {} cp -rf --parents {} $DEST_DIR

    #cp particular files
    find $SRC_DIR -type f \( -name at_command_cmh1000.c \) | xargs -I {} cp -rf --parents {} $DEST_DIR
    find $SRC_DIR -type f \( -name sensor_manager.c -or -name sensor_manager.h -or -name sensor_manager_driver.c -or -name sensor_alg_interface.h \) | xargs -I {} cp -rf --parents {} $DEST_DIR
    cp -f --parents $SRC_DIR/project/mt2523_hdk/apps/phicomm_w2/src/sys_init.c $DEST_DIR

    #cp image files
    find $SRC_DIR/out/mt2523_hdk/phicomm_w2/ -maxdepth 1 -type f | xargs -I {} cp -rf --parents {} $DEST_DIR
}

@ Copy folder structure (sans files) from one location to another {
  You could do something like:

  find . -type d >dirs.txt
  to create the list of directories, then

  xargs mkdir -p <dirs.txt
  to create the directories on the destination.
}

@ ctags {
  "import source to tags"
  $ ctags -R ".c.h"

  "move cursor on function, macro, variable...etc"
  key: ctrl + ]

  "Back to the function call"
  key: ctrl + t

  "vim import tags file"
  :set tags=/home/sway/src/tags
}

@ vimdiff {
  Keyboard Shortcuts:
  do - Get changes from other window into the current window.
  dp - Put the changes from current window into the other window.
  ]c - Jump to the next change.
  [c - Jump to the previous change.
  Ctrl W + Ctrl W - Switch to the other split window.

  If you load up two files in splits (:vs or :sp), you can do :diffthis on each window and achieve a diff of files that were already loaded in buffers
  :diffoff can be used to turn off the diff mode.

  "update diff"
  : diffupdate

  zo 顯示隱藏 / 折疊的文字區塊

  zc 將目前游標所在位置文字區塊隱藏 / 折疊

  zr 將兩份文件都完全折疊

  reference linking:
  http://vimdoc.sourceforge.net/htmldoc/diff.html
}

@ screen note {
  "screen operation"
    Ctrl + a 與 k 關閉目前的 screen 視窗
    Ctrl + a 與 d 卸離 screen 工作環境
    Ctrl + a 與 Esc 鍵（或 Ctrl + a 與 [）進入複製模式（copy mode），可用方向鍵操作捲軸，或用 / 與 ? 來搜尋，按下空白鍵開始選取要複製的內容，選取完成後再按下第二次空白鍵，即可複製，隨後使用 Ctrl + ] 可貼上複製的內容。

  There is for screen install:
    https://blog.gtwang.org/linux/screen-command-examples-to-manage-linux-terminals/

  There is for UART:
    "connecting a com port and save log" $ screen -L /dev/ttyUSB0 115200
    "record current screen anything": C-a H
    "clear current screen content": C-a C
    "kill": C-a k

  "Kill detached screen session [closed]"
    $ screen -X -S [session # you want to kill] quit
}

@ unzip opt {
  $ unzip -u test.zip
  $ unzip -j test.zip /*-j: it only unzip files that doesn't include directory*/
  $ unzip test.zip -d mydir /*-d: it means destnation directory*/
}

@ vim How to turn off expandtab for editing makefiles {
  set noexpandtab
  set expandtab
}

@ ubuntu update {
  $ sudo apt-get update
  $ sudo apt-get -y dist-upgrade
  $ sudo apt-get clean
  $ sudo apt-get autoremove
}

@ dd operation {
  create a 0x00 file:
    $ dd if=/dev/zero bs=1 of=/tmp/file bs=2M count=2000
      bs: block size, 1次讀取與寫入 BYTES 位元組的資料，此選項會覆蓋 ibs 與 obs 的設定
      count=N：只處理 N 個輸入區塊，每個區塊的大小為 ibs。
  padding zero bytes into a end of file
    $ dd if=/dev/zero bs count=2148 >> file
  create a 0xff file:
    $ dd if=/dev/zero bs=1k count=100 | tr "\000" "\377" >paddedFile.bin
}

@ git note {
  "show log and changging files"
  $ git log -4 --stat --pretty=oneline

  "config example"
  ref: https://gist.github.com/pksunkara/988716

  "tag a commit and comment"
  $ git tag -a v1.2 9fceb02 -m "Message here"

  "tag remove origin and clone"
  $ git tag -d 12345
  $ git push origin:refs/tag/12345

  "discard unstaged changes"
  $git stash save --keep-index

  "only show commit content"
  $git log -4 --pretty=format:"%s"

  "checkout a tag"
  $ git checkout <tag name> -b tag/<tag nme>

  "push tag to origin"
  $ git push origin <tag name>

  "rename branch"
  $ git branch -m <old name> <new name>
  $ git branch -m <new name>

  "remove a branch from remote"
  $ git push origin :<branch name>
  $ git fetch -p
}

@ git show more detal with a commit {
  git show --pretty=fuller commit_id
}

@ git review configuration file {
  $ git config -l
}

@ git remove file {
  $ git rm <file>
  $ git commit -m "note"
}

@ git rename file {
  $ git mv <file.a> <file.b>
  $ git commit -m "note"
}

@ git diff between more tages {
  $ git diff tag1 tag2 (--stat)
    --stat: look at the difference for some particular file

  $ git log tag1..tag2
  sometimes it may be convenient to see only the list of files that were changed:

  $ git diff tag1 tag2 -- some/file/name
  A tag is only a reference to the latest commit 'on that tag', so that you are doing a diff on the commits between them.
}

@ git log {
  $ git log tag1..tag2 (--stat/--raw)
    sometimes it may be convenient to see only the list of files that were changed:
}

@ git "stash" {
  $ git stash save "comment"
  $ git show-branch stash
  $ git pop /*it will reture to previous stash and drop*/
  $ git stash drop /*it will remove stash stack*/
  $ git stash list
  $ git stash apply <ID>
}

Also, a good reference: http://learn.github.com/p/diff.html

@ svn export somes files {
  "export something" $ svn export http://172.16.3.240/svn/common/Algorithm/CommonAlgo/XP_NANO/cwm_fusion_ExMem/V03.14.02_20170911/
}

@ find "move folders to other folder" {
  find . -maxdepth 1 -type d | grep -v .git | grep -v linkit | sudo xargs -I {} mv -v {} ./linkit/
  grep -i pattern files ：不區分大小寫地搜索。默認情況區分大小寫， 
  grep -l pattern files ：隻列出匹配的文件名， 
  grep -L pattern files ：列出不匹配的文件名， 
  grep -w pattern files ：隻匹配整個單詞，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’）， 
  grep -C number pattern files ：匹配的上下文分別顯示[number]行， 
  grep pattern1 | pattern2 files ：顯示匹配 pattern1 或 pattern2 的行， 
  grep pattern1 files | grep pattern2 ：顯示既匹配 pattern1 又匹配 pattern2 的行。
  e.g: $ grep -rlwn --include=Makefile "at_command_sensor.c" ./project/mt2523_hdk/apps/cmh1000_atci/
}

@ find "move folders to other folder" {
  find . -maxdepth 1 -type d | grep -v .git | grep -v linkit | sudo xargs -I {} mv -v {} ./linkit/
  grep -i pattern files ：不區分大小寫地搜索。默認情況區分大小寫， 
  grep -l pattern files ：隻列出匹配的文件名， 
  grep -L pattern files ：列出不匹配的文件名， 
  grep -w pattern files ：隻匹配整個單詞，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’）， 
  grep -C number pattern files ：匹配的上下文分別顯示[number]行， 
  grep pattern1 | pattern2 files ：顯示匹配 pattern1 或 pattern2 的行， 
  grep pattern1 files | grep pattern2 ：顯示既匹配 pattern1 又匹配 pattern2 的行。
  e.g: $ grep -rlwn --include=Makefile "at_command_sensor.c" ./project/mt2523_hdk/apps/cmh1000_atci/
}

@ grep "search the word in particular file" {
  $ grep -r --include=*.html --include=*.php --include=*.htm "pattern" /some/path/
  $ grep -r --include=*.{html,php,htm} "pattern" /some/path/
  $ find /some/path/ -name "*.htm*" -or -name "*.php" | xargs grep "pattern"
}

@ minicom {
  $ minicom -D /dev/ttyUSB0 /*link device*/
  $ minicom -C xxx.log /*capture log*/
  C-a x /*exit*/
}

@ device lock {
  $ sudo rm /var/lock/LCK...ttyUSB2
}

@ vim skill {
  "import .vimrc file":
    :so ~/.vimrc
  "show binary file":
    :%!xxd
  "copy more lines in register, and then paste to a place"
    1. "V" is for a section would be like to copy.
    2. "kyy
    3. "kp
  "replace from string.a to string.b"
    :1,$s/string.a/string.b/gc

  ref.: https://www.openfoundry.org/tw/tech-column/2383-vim--buffers-and-windows
  編輯緩衝區 (Buffers)
  $ vim file1 file2 file3

  :buffers (:ls or :files)
  1 %a   "file1"                        line 1
  2      "file2"                        line 0
  3      "file3"                        line 0

  跳至特定編輯緩衝區可使用 :[N]buffer 命令，如:
  :2buffer or :buffer 2

  若要新增其他檔案進編輯緩衝區，可使用 :badd 命令:
  :badd path/to/file4

}

@ mount @{
  nas "fury_fw_nas" //172.16.3.220/cwm_rd_nasvr/Document_Center/AE/Project/AcerFury/firmware/cwm_release/
  $ sudo mount -t cifs -o username=smith.hu,password=123456 //172.16.3.220/cwm_rd_nasvr/Document_Center/AE/Project/AcerFury/firmware/cwm_release/ ~/mnt/fw

  nas "fury_qa_nas" //172.16.3.220/cwm_rd_nasvr/Document_Center/General/QA/Project/Acer/Fury/cwm_release/
  $ sudo mount -t cifs -o username=smith.hu,password=123456 //172.16.3.220/cwm_rd_nasvr/Document_Center/General/QA/Project/Acer/Fury/cwm_release/ ~/mnt/qa

  mount "mount nas storage" $sudo mount -t cifs -o username=smith.hu,password=123456 //172.16.3.220/cwm_rd_nasvr/Document_Center/AE/Personal/Smith /mnt/cwm_nas
  umount "umount a storage" $sudo umount <path>
}

@ docker operation {
  docker "show existing docker images" $ docker images
  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
  ubuntu/14.04        mt2523              8777f884692c        10 days ago         255.7 MB
  ubuntu              raspi               571ff1844733        13 days ago         430.2 MB
  ubuntu              16.04               d355ed3537e9        4 weeks ago         119.2 MB
  ubuntu              14.04               4a2820e686c4        4 weeks ago         188 MB

  docker "start a docker image" $ sudo docker run -t -i -v /home/smith/project/mt2523:/home/mt2523 ubuntu/14.04:mt2523 bash
  docker "export a docker image, save the image setting":
  $ sudo sudo docker ps
  CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

  $ sudo docker export "NAMES" > "NAMES".tar

  docker "import a docker image" $ sudo docker import NAMES.tar "YOUR WANTED REPOSITORY":"YOU WANTED TAG"
}

@ xxd operation {
  xxd "create a C header file from a binary file" $ xxd -i "a binary files" > binary_file.h
}

@ adb opertaion {
  "kill/start server":
    $ sudo adb kill-server
    $ sudo adb start-server
}

@ find operation {
  "list all c files in directory"
    $ find . -type f -name "*.c"
  "reference": https://blog.gtwang.org/linux/unix-linux-find-command-examples/
}

@ sed operation {
  sed "replace string in a file" $ sed -i 's/unsigned/const unsigned/g' os_checked_iram.h
   -i: 選項可以直接修改檔案內容
}

@ date shell script {
  date "reference"
  DATE1=`date +%Y%m%d`
  DATE2=$(date +%Y%m%d)
  echo "執行命令 \"date +%Y%m%d\" 得到結果 `date +%Y%m%d`"
  echo "DATE1 = $DATE1"
  echo "DATE2 = $DATE2"
}

END OF FILES
